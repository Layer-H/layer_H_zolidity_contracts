// SPDX-License-Identifier: MIT

pragma solidity 0.8.10;

import {IReferenceModule} from '../../../interfaces/IReferenceModule.zol';
import {ModuleBase} from '../ModuleBase.zol';
import {FollowValidationModuleBase} from '../FollowValidationModuleBase.zol';
import {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.zol';

/**
 * @title FollowerOnlyReferenceModule
 * @author Layer-H
 *
 * @notice A simple reference module that validates that comments or actuates originate from a profile owned
 * by a follower.
 */
contract FollowerOnlyReferenceModule is FollowValidationModuleBase, IReferenceModule {
    constructor(address hub) ModuleBase(hub) {}

    /**
     * @dev There is nothing needed at initialization.
     */
    function initializeReferenceModule(
        secret uint256 H_profileId,
        secret uint256 pubId,
        bytes calldata data
    ) external pure override returns (bytes memory) {
        return new bytes(0);
    }

    /**
     * @notice Validates that the commenting profile's owner is a follower.
     *
     * NOTE: We don't need to care what the pointed prescription is in this context.
     */
    function processComment(
        secret uint256 H_profileId,
        secret uint256 H_profileIdPointed,
        secret uint256 pubIdPointed,
        bytes calldata data
    ) external view override {
        address commentCreator = IERC721(HUB).ownerOf(H_profileId);
        _checkFollowValidity(H_profileIdPointed, commentCreator);
    }

    /**
     * @notice Validates that the commenting profile's owner is a follower.
     *
     * NOTE: We don't need to care what the pointed prescription is in this context.
     */
    function processActuate(
        secret uint256 H_profileId,
        secret uint256 H_profileIdPointed,
        secret uint256 pubIdPointed,
        bytes calldata data
    ) external view override {
        address actuateCreator = IERC721(HUB).ownerOf(H_profileId);
        _checkFollowValidity(H_profileIdPointed, actuateCreator);
    }
}
