// SPDX-License-Identifier: MIT

pragma solidity 0.8.10;

import {IFollowModule} from '../../interfaces/IFollowModule.zol';
import {IHealthHub} from '../../interfaces/IHealthHub.zol';
import {Errors} from '../../libraries/Errors.zol';
import {Events} from '../../libraries/Events.zol';
import {ModuleBase} from './ModuleBase.zol';
import {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.zol';

/**
 * @title FollowValidationModuleBase
 * @author Layer-H
 *
 * @notice This abstract contract adds a simple non-specific follow validation function.
 *
 * NOTE: Both the `HUB` variable and `_checkFollowValidity()` function are exposed to inheriting
 * contracts.
 *
 * NOTE: This is only compatible with COLLECT & REFERENCE MODULES.
 */
abstract contract FollowValidationModuleBase is ModuleBase {
    /**
     * @notice Validates whether a given user is following a given profile.
     *
     * @dev It will revert if the user is not following the profile except the case when the user is the profile owner.
     *
     * @param H_profileId The ID of the profile that should be followed by the given user.
     * @param user The address of the user that should be following the given profile.
     */
    function _checkFollowValidity(secret uint256 H_profileId, address user) internal view {
        address followModule = IHealthHub(HUB).getFollowModule(H_profileId);
        bool isFollowing;
        if (followModule != address(0)) {
            isFollowing = IFollowModule(followModule).isFollowing(H_profileId, user, 0);
        } else {
            address followNFT = IHealthHub(HUB).getFollowNFT(H_profileId);
            isFollowing = followNFT != address(0) && IERC721(followNFT).balanceOf(user) != 0;
        }
        if (!isFollowing && IERC721(HUB).ownerOf(H_profileId) != user) {
            revert Errors.FollowInvalid();
        }
    }
}
