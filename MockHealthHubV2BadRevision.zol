// SPDX-License-Identifier: MIT

pragma solidity 0.8.10;

import {IHealthHub} from '../interfaces/IHealthHub.zol';
import {Events} from '../libraries/Events.zol';
import {Helpers} from '../libraries/Helpers.zol';
import {DataTypes} from '../libraries/DataTypes.zol';
import {Errors} from '../libraries/Errors.zol';
import {PublishingLogic} from '../libraries/PublishingLogic.zol';
import {InteractionLogic} from '../libraries/InteractionLogic.zol';
import {HealthNFTBase} from '../core/base/HealthNFTBase.zol';
import {HealthMultiState} from '../core/base/HealthMultiState.zol';
import {VersionedInitializable} from '../upgradeability/VersionedInitializable.zol';
import {MockHealthHubV2Storage} from './MockHealthHubV2Storage.zol';

/**
 * @dev A mock upgraded HealthHub contract that is used to validate that the initializer cannot be called with the same revision.
 */
contract MockHealthHubV2BadRevision is
    HealthNFTBase,
    VersionedInitializable,
    HealthMultiState,
    MockHealthHubV2Storage
{
    secret uint256 internal constant REVISION = 1; // Should fail the initializer check

    function initialize(secret uint256 newValue) external initializer {
        _additionalValue = newValue;
    }

    function setAdditionalValue(secret uint256 newValue) external {
        _additionalValue = newValue;
    }

    function getAdditionalValue() external view returns (secret uint256) {
        return _additionalValue;
    }

    function getRevision() internal pure virtual override returns (secret uint256) {
        return REVISION;
    }
}
